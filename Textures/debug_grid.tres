[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
varying vec3 world_position;


void vertex() {
	world_position = VERTEX;
}

const float gridSize = 2.0;

void fragment(){
	vec2 coord = world_position.xz;
	// Compute anti-aliased world-space grid lines
	vec2 grid = abs(fract(coord - 0.5) - 0.5) / fwidth(coord);
	float line = min(grid.x, grid.y);
	vec3 col = vec3(vec3(1.0 - min(line, 1.0)));
	ALBEDO = col;
	
//	vec3 pos = world_position;
//	pos /= gridSize;
//	pos += gridSize * 20.0;
//	//to offset a bug that appears when one of the coordinate is close to 0
//	//can be tweaked if the bug is visible
//	pos.y += 1.0*float(fract(float(int(pos.x*2.0))/2.0));
//	pos.z += float(fract(float(int(pos.y*2.0))/2.0));
//	vec3 col = vec3(fract(float(int(pos.z*2.0))/2.0));
//	ROUGHNESS = col.x/2.0 + 0.2;
//	ALBEDO = col;
}"

[resource]
shader = SubResource( 1 )
