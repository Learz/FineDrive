[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec4 base_mask : hint_color;
uniform vec4 base_color : hint_color;
uniform vec4 next_color : hint_color;
uniform float color_transition : hint_range(0,1);

uniform vec4 window_mask : hint_color;
uniform vec4 window_color : hint_color;

/**
 * Draw a circle at vec2 `pos` with radius `rad` and
 * color `color`.
 */
vec4 circle(vec2 uv, vec2 pos, float rad, vec3 color) {
	float d = length(pos - uv) - rad;
	float t = ceil(clamp(d, 0.0, 1.0));
	return vec4(color, 1.0 - t);
}

//void vertex(){
//	if(COLOR.r >= window_mask.r && COLOR.g >= window_mask.g && COLOR.b >= window_mask.b){
//		COLOR = window_color;
//	}
//	if(COLOR.r >= base_mask.r && COLOR.g >= base_mask.g && COLOR.b >= base_mask.b){
//		vec4 circ = circle(UV, vec2(0.0,0.0), color_transition, next_color.rgb);
//		COLOR = mix(base_color, circ, circ.a);
//	}
//}

void fragment(){
	if(color_transition == 0f){
		ALBEDO = base_color.rgb;
	}
	else if(ALBEDO.r >= base_mask.r && ALBEDO.g >= base_mask.g && ALBEDO.b >= base_mask.b){
		vec4 circ = circle(
			vec2(	SCREEN_UV.x, SCREEN_UV.y * (VIEWPORT_SIZE.y / VIEWPORT_SIZE.x)), //UVs
					vec2(0.5,(VIEWPORT_SIZE.y / VIEWPORT_SIZE.x)/2.0-0.15), //Position
					color_transition, //Radius
					next_color.rgb); //Color
		ALBEDO = mix(base_color, next_color, circ.a).rgb;
	}
//	if(ALBEDO.r >= window_mask.r && ALBEDO.g >= window_mask.g && ALBEDO.b >= window_mask.b){
//		ALBEDO = window_color.rgb;
//	}
}"

[resource]
shader = SubResource( 1 )
shader_param/base_mask = Color( 0.8, 0, 1, 1 )
shader_param/base_color = Color( 1, 0.607843, 0, 1 )
shader_param/next_color = Color( 0, 0, 0, 1 )
shader_param/color_transition = 0.0
shader_param/window_mask = Color( 0, 0.698039, 1, 1 )
shader_param/window_color = Color( 0.380392, 0.662745, 0.678431, 1 )
